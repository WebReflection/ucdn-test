import{isArray,slice}from"../../uarray/esm/index.js";import udomdiff from"../../udomdiff/esm/index.js";import{aria,attribute,data,event,ref,setter,text}from"../../uhandlers/esm/index.js";import{diffable}from"../../uwire/esm/index.js";import{reducePath}from"./node.js";const diff=(e,t,r)=>udomdiff(e.parentNode,t,r,diffable,e),handleAnything=e=>{let t,r,i=[];const a=n=>{switch(typeof n){case"string":case"number":case"boolean":t!==n&&(t=n,r?r.textContent=n:r=document.createTextNode(n),i=diff(e,i,[r]));break;case"object":case"undefined":if(null==n){t!=n&&(t=n,i=diff(e,i,[]));break}if(isArray(n)){t=n,0===n.length?i=diff(e,i,[]):"object"==typeof n[0]?i=diff(e,i,n):a(String(n));break}"ELEMENT_NODE"in n&&t!==n&&(t=n,i=diff(e,i,11===n.nodeType?slice.call(n.childNodes):[n]))}};return a},handleAttribute=(e,t)=>"ref"===t?ref(e):"aria"===t?aria(e):"data"===t?data(e):"."===t.slice(0,1)?setter(e,t.slice(1)):"on"===t.slice(0,2)?event(e,t):attribute(e,t);export function handlers(e){const{type:t,path:r}=e,i=r.reduceRight(reducePath,this);return"node"===t?handleAnything(i):"attr"===t?handleAttribute(i,e.name):text(i)}